basePath: /api/v1
definitions:
  controllers.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      image:
        type: string
      name:
        type: string
      password:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  services.Course:
    properties:
      course_description:
        type: string
      course_id:
        type: string
      course_name:
        type: string
      instructor_id:
        type: string
      video_url:
        allOf:
        - $ref: '#/definitions/sql.NullString'
        description: Use sql.NullString for nullable columns
    type: object
  services.Credentials:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  sql.NullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Sign in
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/services.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Sign in
      tags:
      - auth
  /courses/course:
    post:
      consumes:
      - application/json
      description: Create a new course
      parameters:
      - description: Course
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/services.Course'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.Course'
      summary: Create a new course
      tags:
      - courses
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.User'
      summary: Get all users
      tags:
      - users
  /users/user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.User'
      summary: Create a new user
      tags:
      - users
  /users/user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.User'
      summary: Delete user by id
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.User'
      summary: Get user by id
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.User'
      summary: Update user by id
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
